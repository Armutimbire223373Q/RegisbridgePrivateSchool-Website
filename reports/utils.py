import os
import tempfile
from django.conf import settings
from django.http import HttpResponse
from reportlab.lib.pagesizes import letter, A4
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib import colors
from reportlab.lib.units import inch
from datetime import datetime


def generate_report(template, parameters, user):
    """Generate a report file based on template and parameters"""
    
    # Create temporary file
    temp_dir = tempfile.gettempdir()
    filename = f"report_{template.id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
    file_path = os.path.join(temp_dir, filename)
    
    # Generate PDF
    doc = SimpleDocTemplate(file_path, pagesize=A4)
    story = []
    styles = getSampleStyleSheet()
    
    # Title
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=18,
        spaceAfter=30,
        alignment=1  # Center alignment
    )
    
    story.append(Paragraph(template.name, title_style))
    story.append(Spacer(1, 12))
    
    # Report details
    details_style = ParagraphStyle(
        'Details',
        parent=styles['Normal'],
        fontSize=10,
        spaceAfter=6
    )
    
    story.append(Paragraph(f"Generated by: {user.get_full_name()}", details_style))
    story.append(Paragraph(f"Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}", details_style))
    story.append(Paragraph(f"Template: {template.name}", details_style))
    story.append(Spacer(1, 20))
    
    # Report content based on template type
    if template.report_type == 'ACADEMIC':
        story.extend(_generate_academic_report_content(parameters))
    elif template.report_type == 'ATTENDANCE':
        story.extend(_generate_attendance_report_content(parameters))
    elif template.report_type == 'FINANCIAL':
        story.extend(_generate_financial_report_content(parameters))
    else:
        story.append(Paragraph("Report content will be generated based on parameters.", styles['Normal']))
    
    # Build PDF
    doc.build(story)
    
    # Get file size
    file_size = os.path.getsize(file_path)
    
    return file_path, file_size


def _generate_academic_report_content(parameters):
    """Generate academic report content"""
    from grades.models import Grade
    from students.models import StudentProfile
    
    story = []
    styles = getSampleStyleSheet()
    
    # Sample academic data
    story.append(Paragraph("Academic Performance Summary", styles['Heading2']))
    story.append(Spacer(1, 12))
    
    # Create sample table
    data = [
        ['Student', 'Subject', 'Grade', 'Percentage'],
        ['John Doe', 'Mathematics', 'A', '85%'],
        ['Jane Smith', 'English', 'B', '78%'],
        ['Bob Johnson', 'Science', 'A', '92%'],
    ]
    
    table = Table(data)
    table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, 0), 14),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
        ('GRID', (0, 0), (-1, -1), 1, colors.black)
    ]))
    
    story.append(table)
    story.append(Spacer(1, 20))
    
    return story


def _generate_attendance_report_content(parameters):
    """Generate attendance report content"""
    story = []
    styles = getSampleStyleSheet()
    
    story.append(Paragraph("Attendance Summary", styles['Heading2']))
    story.append(Spacer(1, 12))
    
    # Sample attendance data
    data = [
        ['Date', 'Present', 'Absent', 'Late', 'Total'],
        ['2024-01-15', '25', '2', '1', '28'],
        ['2024-01-16', '26', '1', '1', '28'],
        ['2024-01-17', '24', '3', '1', '28'],
    ]
    
    table = Table(data)
    table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, 0), 14),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
        ('GRID', (0, 0), (-1, -1), 1, colors.black)
    ]))
    
    story.append(table)
    story.append(Spacer(1, 20))
    
    return story


def _generate_financial_report_content(parameters):
    """Generate financial report content"""
    story = []
    styles = getSampleStyleSheet()
    
    story.append(Paragraph("Financial Summary", styles['Heading2']))
    story.append(Spacer(1, 12))
    
    # Sample financial data
    data = [
        ['Month', 'Revenue', 'Outstanding', 'Paid'],
        ['January 2024', '$15,000', '$3,000', '$12,000'],
        ['February 2024', '$18,000', '$2,500', '$15,500'],
        ['March 2024', '$20,000', '$4,000', '$16,000'],
    ]
    
    table = Table(data)
    table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, 0), 14),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
        ('GRID', (0, 0), (-1, -1), 1, colors.black)
    ]))
    
    story.append(table)
    story.append(Spacer(1, 20))
    
    return story


def generate_fee_invoice_pdf(invoice):
    """Generate PDF for fee invoice"""
    from django.http import HttpResponse
    from reportlab.lib.pagesizes import letter
    from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer
    from reportlab.lib.styles import getSampleStyleSheet
    from reportlab.lib import colors
    from reportlab.lib.units import inch
    import tempfile
    import os
    
    # Create temporary file
    temp_dir = tempfile.gettempdir()
    filename = f"invoice_{invoice.id}.pdf"
    file_path = os.path.join(temp_dir, filename)
    
    # Generate PDF
    doc = SimpleDocTemplate(file_path, pagesize=letter)
    story = []
    styles = getSampleStyleSheet()
    
    # Title
    story.append(Paragraph("INVOICE", styles['Title']))
    story.append(Spacer(1, 12))
    
    # Invoice details
    story.append(Paragraph(f"Invoice #: {invoice.id}", styles['Normal']))
    story.append(Paragraph(f"Student: {invoice.student.user.get_full_name()}", styles['Normal']))
    story.append(Paragraph(f"Term: {invoice.term}", styles['Normal']))
    story.append(Paragraph(f"Issue Date: {invoice.issue_date}", styles['Normal']))
    if invoice.due_date:
        story.append(Paragraph(f"Due Date: {invoice.due_date}", styles['Normal']))
    story.append(Spacer(1, 20))
    
    # Invoice lines
    data = [['Description', 'Amount']]
    for line in invoice.lines.all():
        data.append([line.description, f"${line.amount}"])
    
    data.append(['TOTAL', f"${invoice.total_amount}"])
    
    table = Table(data)
    table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, 0), 14),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -2), colors.beige),
        ('BACKGROUND', (0, -1), (-1, -1), colors.lightgrey),
        ('GRID', (0, 0), (-1, -1), 1, colors.black)
    ]))
    
    story.append(table)
    
    # Build PDF
    doc.build(story)
    
    # Return file response
    with open(file_path, 'rb') as pdf_file:
        response = HttpResponse(pdf_file.read(), content_type='application/pdf')
        response['Content-Disposition'] = f'attachment; filename="invoice_{invoice.id}.pdf"'
        return response


def generate_student_grade_pdf(student_profile, term=None):
    """Generate a simple PDF grade report for a student (optionally for a specific term)."""
    from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer
    from reportlab.lib.styles import getSampleStyleSheet
    import tempfile

    temp_dir = tempfile.gettempdir()
    filename = (
        f"grades_{student_profile.id}_{term.id if getattr(term, 'id', None) else 'all'}.pdf"
    )
    file_path = os.path.join(temp_dir, filename)

    doc = SimpleDocTemplate(file_path, pagesize=A4)
    story = []
    styles = getSampleStyleSheet()

    # Header
    title = f"Grade Report - {student_profile.user.get_full_name()}"
    if term is not None:
        title += f" (Term: {getattr(term, 'name', str(term))})"
    story.append(Paragraph(title, styles['Title']))
    story.append(Spacer(1, 12))

    # Collect grades
    from grades.models import Grade

    grades_qs = Grade.objects.filter(student=student_profile)
    if term is not None:
        grades_qs = grades_qs.filter(assessment__term=term)

    data = [["Subject", "Assessment", "Marks", "Total"]]
    for g in grades_qs.select_related("assessment__subject"):
        data.append(
            [
                getattr(g.assessment.subject, "name", "-"),
                getattr(g.assessment, "title", "-"),
                str(getattr(g, "marks_obtained", "-")),
                str(getattr(g.assessment, "total_marks", "-")),
            ]
        )

    if len(data) == 1:
        story.append(Paragraph("No grades available.", styles['Normal']))
    else:
        table = Table(data)
        table.setStyle(
            TableStyle(
                [
                    ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
                    ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                    ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                    ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                    ('FONTSIZE', (0, 0), (-1, 0), 12),
                    ('BOTTOMPADDING', (0, 0), (-1, 0), 10),
                    ('GRID', (0, 0), (-1, -1), 1, colors.black),
                ]
            )
        )
        story.append(table)

    doc.build(story)

    with open(file_path, 'rb') as pdf_file:
        response = HttpResponse(pdf_file.read(), content_type='application/pdf')
        response['Content-Disposition'] = (
            f'attachment; filename="{os.path.basename(file_path)}"'
        )
        return response